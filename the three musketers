#include<bits/stdc++.h>
using namespace std;
bool isvowel(char ch)
{
    if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u')
    {
        return true;
    }
    return false;
}
vector<string> subsets(string s)
{
    int sz=(1<<s.size());
    vector<string> ans;
    for(int mask=0;mask<sz;++mask)
    {
        string subset;
        for(int bit=0;bit<s.size();++bit)
        {
            if(mask&(1<<bit))
            {
                subset.push_back(s[bit]);
            }
        }
        if(subset.size())
        {
        ans.push_back(subset);
        }
        // ans.push_back(subset);
    }
    return ans;
}
int main()
{
    int t,i;
    cin>>t;
    
    while(t--)
    {
        int n;
        cin>>n;
        string str[n];
        for(int j=0;j<n;j++)
        {
            cin>>str[j];
        }
        unordered_map<string,int> hsh;
        for(int j=0;j<n;j++)
        {
            set<char> distinct_vw;
            for(char ch:str[j])
            {
                if(isvowel(ch))
                {
                    distinct_vw.insert(ch);
                }
            }
            string vowel_str;
            for(char ch :distinct_vw)
            {
                vowel_str.push_back(ch);
            }
            vector<string> allsubsets=subsets(vowel_str);
            for(string str: allsubsets)
            {
                hsh[str]++;
            }
        }
            long long ans=0;
            // for(auto pr:hsh)
            // {
            //     cout<<pr.first<<" "<<pr.second<<endl;
            // }
            for(auto &pr:hsh)
            {
                if(pr.second<3) continue;
                long long ct=pr.second;
                long long ways=ct*(ct-1)*(ct-2)/6;
                if(pr.first.size()%2==0) 
                {
                    ans-=ways;

                }
                else
                {
                    ans+=ways;
                }
            }
            

        
        cout<<ans<<endl;
    }
    return 0;
}
