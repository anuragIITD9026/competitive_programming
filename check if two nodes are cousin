/*Complete the function below
Node is as follows:
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    // Function to check if two nodes are cousins in a tree
    bool checkparent(Node* root,int x,int y)
    {
        if(root==nullptr)
        {
            return false;
        }
        if(root->left&&root->right)
        {
            if(root->left->data==x&&root->right->data==y)
            {
                return true;
            }
             if(root->left->data==y&&root->right->data==x)
            {
                return true;
            }
        }
        return checkparent(root->left,x,y)||checkparent(root->right,x,y);
        
    }
    bool isCousins(Node* root, int x, int y) {
        // write code here
        queue<Node*> q;
        q.push(root);
        int level=0;
        int levelx=-1,levely=-1;
        while(!q.empty())
        {
            int n=q.size();
            while(n--)
            {
                Node* temp=q.front();
                q.pop();
                if(temp->data==x)
                {
                   levelx=level; 
                }
                if(temp->data==y)
                {
                    levely=level;
                }
                if(temp->left)
                {
                q.push(temp->left);
                }
                if(temp->right)
                {
                q.push(temp->right);
                }
            }
            level++;
            
       if(levelx!=-1&&levely!=-1)
       break;
            
        }
        if(levelx!=levely)
        {
            return false;
        }
        return !checkparent(root,x,y);
        
    }
};
