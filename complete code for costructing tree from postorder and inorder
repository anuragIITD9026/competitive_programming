class Solution {
  public:
int findpos(vector<int> in,int target,int start,int end)
  {
    for(int i=start;i<=end;i++)
    {
        if(in[i]==target)
        {
        return i;
        }
    }
    return -1;  
  }
  Node* tree(vector<int> in,vector<int> post,int instart,int inend,int index)
  {
      if(instart>inend)
      {
          return nullptr;
      }
      Node *root=new Node(post[index]);
      int pos=findpos(in,post[index],instart,inend);
      root->left=tree(in,post,instart,pos-1,index-1-(inend-pos));
      root->right=tree(in,post,pos+1,inend,index-1);
      return root;
  }
    // Function to return a tree created from postorder and inoreder traversals.
    Node* buildTree(vector<int> inorder, vector<int> postorder) {
        // code here
        int n=inorder.size();
        return tree(inorder,postorder,0,n-1,n-1);
    }
};
